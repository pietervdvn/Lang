Maybe
-----
Here you'll find the declaration of ''Maybe'' and util functions.
-----

import Data.Bool

--- A collection which contains at most one value.

It represents a computation that might fail, such as ''head ls'' or a missing value within a ''Dict''.

The syntactic sugar ''a?'' desugars to ''Maybe a''.

This type plays an important role within the compiler, as it is used for pattern matching.
---
type Maybe a	= {Nothing	-- Represents the missing value. Always keep ''Nothing'' as first one in the ADT!
		, Just value:a}	-- Constructor with the actual value

precedence of (?) is right, (?) < (!), (?) < (==)

-- Unpacks the ''Maybe''. If it is nothing, the default value is used.
-- ~ id: a,x => (Just a) ? x = a
-- > Nothing ? 1	= 1
-- > (Just 42) ? 1	= 42
(?)		: Maybe a -> a -> a
(Just a) _	= a
_ 	 a	= a


firstJust	: Maybe a -> Maybe a -> Maybe a
a@(Just _) _	= a
_ b		= b

---
-- Removes all ''Nothing''s out of the collection
justs		: (a?)* -> a*
(Nothing:as)	= Just as
[(Just a):as]	= [a]:just as
---

---

# The role of Maybe within the compiler

When a function is deconstructed in a function, e.g. in the ''and'' function:

	and		: Bool -> Bool -> Bool
	True True	= True
	*		= False

Let us take the first ''True'' pattern. This is internally transformed into a ''Deconstruct "True" [Bool -> Maybe (,)]'' (where ''(,)'' represents a tuple with _no_ internal elements).

Whenever the interpreter wants to do pattern matching, e.g. against a value ''ADTValue 0 "False" []'' (((Here does the "False" represent a print name of the constructor))) it does this by executing the (automatically generated) function. Note that this is exactly the same as a regular functions, allowing your own deconstructor functions.

	True		: Bool -> Maybe (,)
	#ADTValue 0 "False" 	= ADTValue 0 "Nothing" []
	#ADTValue 1 "True"	= ADTValue 1 "Just" [TupleValue []]

Thus:

	True (((as deconstructor))) False	= Nothing
	True (((as deconstructor))) False	= Just (,)
---
