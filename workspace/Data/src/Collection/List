List
----
The list category declaration.
----

import Data.Bool
import Data.Char
import Collection.Void
import Collection.Maybe
import Collection.Tuple
import Collection.Set
import Category.Eq
---
A ''Collection'' which preserves order and allows duplicate elements.

The syntactic sugar ''[a]'' desugars to ''List a''
---
type List a	= {Empty} + (List' a)
type List' a	= {Elem a (List a)}

instance List a is Set a

map	: (a -> b) -> List a -> List b
_ Empty	= Empty
f (Elem head tail)	= Elem (f head) (map f tail)


-- Gives the first element of the list, Nothing if this list was empty
head		: [a] -> Maybe a
Empty		= Nothing
(Elem a _)	= Just a

-- Drops the first element of the list, returns nothing for an empty list
tail		: [a] -> Maybe [a]
(Elem _ tail)	= Just tail
Empty		= Nothing

-- Drops the first element of the list. Returns an empty list if no tail exists
tail'		: [a] -> [a]
(Elem _ tail)	= tail
Empty		= Empty

(+)		: [a] -> [a] -> [a]
Empty ls	= ls
(Elem a tail) ls= a : (tail + ls)

prepend		: (b:a) -> [a] -> [a]
		= Elem

empty		: [a]
		= Empty

([])		: [a]
		= Empty

precedence of (:) is right, (:) < (+)

(:)		: b:a -> [a] -> [a]
		= Elem


-- TODO stringify of a list
stringify	: [a] -> [Char]
Empty		= "[]"
(Elem a tail)	= "TODO: interfaces!"
