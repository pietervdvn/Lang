Types

author		"Pieter Vander Vennet"
date		[2014, 06, 7, 18, 24, 42]
desc		"The syntaxis of types in Languate.
		Valid types are:
		Int		-- a normal type, defined either as ADT or typeclass
		Nat		-- idem
		Int -> Nat	-- a function signature
		{Int}		-- a set of ints
		{Int, String}	-- A set of int,string tuples
		{Int --> String}	-- A dict (hashmap) from int to string
		[Int]		-- list of int
		()		-- unit type
		(a -> b) -> c	-- a function which takes a function
		{a,b -> c}	=== { a, (b -> c) }
		Int?		=== Maybe Int
		a		-- a free variable
		(a : Ord, Eq)	-- a free variable with constraints, namely that a should be ord and eq
		(a in Ord)	-- idem
		(a is Ord, Eq)
		"

public import Prelude


 $subTypeT	::= ":"
 $subTypeWords	::= "in" | "is"
 $typeConjT	::= "\&"

 -----------
 -- TYPES --
 -----------


 $typeIdent	::= "[A..Z][A..Za..z0..9]*'?"
 knownType	::= %((globalIdent moduleSep)* typeIdent)
 $freeType	::= localIdent & !subTypeWords
 parFreeType	::= freeType subTypeT simpleType
 constrFreeType	::= parFreeType | freeType	-- contstrained free type
_$unit		::= "\(\)"
_$dontCare	::= "_"		-- we don't care about the type
_simpleType	::= constrFreeType | knownType | freeType | unit | dontCare | "\(" type "\)"


-- used for lists of tuples. ''[Int, Bool]'' = ''[(Int, Bool)]''
_commaSepTypes	::= type ( "," type)*
_list		::= "\[" commaSepTypes "\]"
_set		::= "\{" commaSepTypes "\}"
_dict		::= "\{" commaSepTypes "-->" commaSepTypes "\}"

_tuple		::= "\(" type ("," type)+ "\)"

-- type without space (or withing a delimiter)
baseType	::= (dict | set | list | tuple | simpleType)
appliedType	::= (simpleType baseType+) | baseType
_typeConj	::= appliedType (typeConjT typeConj)*

type		::= typeConj ("->" typeConj)*


{-
Type requirements arise when a certain free variable should be of a certain superclass.

A classic example is:

    tripleSame		: a -> a -> a -> Bool
    a1 a2 a3		= a1 == a2 && a2 == a3 && a1 == a3

Of course, we have to know that we can compare the results which the ''evalF'' gives us.
We express this constraint as:

	tripleSame	:  (a is Eq) -> a -> a -> Bool

Why not write ''tripleSame : Eq -> Eq -> Eq -> Bool''? This expresses that the first, second and third argument should all implement ''==''.
This does, however, not express that they implement _the same_ ''==''. ''tripleSame True 0 "ABC"''  would be perfectly legal (''Bool'', ''Nat'' and ''String'' all implement ''Eq''),
but comparing two does not make sense.

What is valid syntax?
---------------------

You can use '':'', ''is'', ''are'' or ''in''. These are all syntactically the same.

This is because ''a'' **is** an ''Eq''; ''are'' is used for multiple free values. However, from typetheory point of view, a type is nothing more then the set of values that can be returned. (This is, the ''Bool'' set is nothing more then ''{True, False}''). We can say that this set lies **in** the set **Eq**, which contains all values which can be compared.

E.g.:

	advancedStuff	: (a is Monoid, Eq, b) -> a -> (b is Eq) -> b -> Bool

Resolving types within other modules
------------------------------------

The syntax is ''Module.Type''.
When there is confusion, e.g. both module A and B export a (different) type ''X'', this can be resolved by using ''A.X'' or ''B.X'' respectively.
If there is still confusion, use one more package. E.g. module X.Y.A.B.C and Z.W.A.B.C both export ''T'', differentiate by typing ''Y.A.B.C.T'' and ''W.A.B.C.T''


-}
